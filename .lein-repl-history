(run)
((browser-repl)
(js/alert "yeah")
(browser-repl)
(js/alert "yeah"(
))
(js/alert "yeah")
(set! (.. style background-color js/window) "green")
(.. style background-color js/window)
(.. js/window style)
(.. style js/window )
(js/window )
js/window
(.. js/window)
(.. js/window "style")
(.. js/window style)
(.. js/window :style)
(.. js/window -style)
(.. js/window -style -background-color)
(.. js/window -style -backgroundColor)
(.. js/document -style -backgroundColor)
(.. js/document -body -style -backgroundColor)
(set! (.. js/document -body -style -backgroundColor) "green")
(set! (.. js/document -body -style -backgroundColor) "blue")
(set! (.. js/document -body -style -backgroundColor) "green")
(quit)
(run)
(browser-repl)
(js/alert "yeah")
 (js/Date.)
 (js/Date. "1980")
(.getMonth (js/Date. "1980"))
(.getMont()h (js/Date. "1980"))
(str "yeah " :wat)
format
(clojure.core/format
)
clojure.core/format
(clojure.core/format "%d" 3)
cljs.core
cljs.core/format
(clojure.core/format "%d" 3(
))
(clojure.core/format "%d" 3)
()
(Date.)
(js/Date.)
(.getMonth(js/Date.))
(js/Date. "2014-10-01 8:30")
(.getTimeZone(js/Date. "2014-10-01 8:30"))
(.getTimezoneOffset (js/Date. "2014-10-01 8:30"))
(.getMonth (js/Date. "2014-10-01 8:30"))
(js/Date. "2014-10-20 8:30 ")
(js/Date. "2014-10-20 8:30 JST")
(js/Date. "2014-10-20 8:30:00 JST")
(js/Date. "2014-10-20 8:30:00 +900")
(js/Date. "2014-10-20 8:30:00 +540")
(js/Date. "2014-10-20 8:30:00 -540")
(js/Date. "2014-10-20 8:30:00 -0")
(js/Date. "2014-10-20 8:30:00 UTC")
(js/Date. "2014-10-20 8:30:00 JCT")
(js/Date. "2014-10-20 8:30:00 JST")
(js/Date. "2014-10-20 8:30:00 GMT+0900")
(.getUTC (js/Date. "2014-10-20 8:30:00 GMT+0900"))
(.getUTCTime (js/Date. "2014-10-20 8:30:00 GMT+0900"))
(.getUTCTime (js/Date. "2014-10-20 8:30:00 GMT+0900"))(js/Date.)
(js/Date.)
(+ (js/Date.) 100000)
(+ (.getTime (js/Date.)) 100000)
(.getTime (js/Date.))
(js/Date. (+ (.getTime (js/Date.) (24 * 60 * 60 * 1000))))
(js/Date. (+ (.getTime (js/Date.)) (24 * 60 * 60 * 1000)))
(js/Date. (+ (.getTime (js/Date.)) (* 24 60 60 1000)))
(js/Date. (+ (.getTime (js/Date.)) (* 24 60 60 1000 0)))
(js/Date)
(js/Date. 2004 12 12)
%
a
(core.expenses/app-state)
expenses.core/app-state
(expenses.core/app-state)
expenses.core/app-state
(map (fn [d] (update-in d :date (js/Date. (:date d)))) data)
data
ddata
data
(js->clj #js{"Form Responses 1" :a} :keywordize-keys)
(js->clj #js{"Form Responses 1" 3} :keywordize-keys)
(js->clj #js{ #js "Form Responses 1" 3} :keywordize-keys)
(clj->js {:a-a-a 2}
)
(clj->js {:a-a-a 2})
(clj->js {"aaaaa" 2})
(clj->js {"aaaaa" 2} :keywordize-keys true)
(clj->js {"aaaaa" 2})
expenses.core/post-data
(expenses.core/post-data "a" 3 "t")
(expenses.core/post-data "yeah" 100 "cool")
(expenses.core/post-data "food" 300 "beans")
(def x (chan))
(def x (core.async.chan))
clojure.core.async
clojure.core.async/chan
(clojure.core.async/chan)
(clojurescript.core.async/chan)
(def x (expenses.core/chan))
(expenses.core/post-data "food" 300 "beans")
(expenses.core/post-data nil "food" 300 "beans")
(run)
(browser-repl)
(expenses.core/post-data nil "food" 2000 "smoothieshiz")
(expenses.core/post-data  "food" 2000 "smoothieshiz")
(expenses.core/post-data nil "food" 2000 "smoothieshiz")
(quit)
(run)
(browser-repl)
(quit)
(run)
(browser-repl)
(expenses.core/post-data nil "coffee" 150 "711")
(quit)
(run)
(browser-repl)
(exit)
(run)
(quit)
(run0)
(run)
(quit)
(map int "banana")
(apply + (map int "banana"))
(mod (apply + (map int "banana")) (* 256 256 256 ))
